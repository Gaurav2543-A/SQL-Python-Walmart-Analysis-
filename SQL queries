USE walmart_db;

-- Fetch all records from the walmart table
SELECT * FROM walmart;

-- Fetch the payment_method column
SELECT payment_method FROM walmart;

-- Count occurrences of each payment method
SELECT payment_method, COUNT(*) AS Count 
FROM walmart 
GROUP BY payment_method;

-- Count distinct branches
SELECT COUNT(DISTINCT Branch) FROM walmart;

-- Q1: Calculate the total revenue generated by each branch
SELECT Branch, SUM(Totals) AS Total_Revenue 
FROM walmart  
GROUP BY Branch 
ORDER BY Total_Revenue ASC;

-- Q2: Identify the top 3 categories contributing the most to revenue in each city
WITH RankedCategories AS (
    SELECT City, category, SUM(Totals) AS Total_Revenue, 
           RANK() OVER (PARTITION BY City ORDER BY SUM(Totals) DESC) AS Ranks 
    FROM walmart 
    GROUP BY City, category
)
SELECT City, category, Total_Revenue
FROM RankedCategories
WHERE Ranks <= 3
ORDER BY City, Ranks;

-- Q3: Find the average rating received by each branch
SELECT Branch, AVG(rating) AS Avg_Rating 
FROM walmart 
GROUP BY Branch 
ORDER BY Avg_Rating DESC;

-- Q4: Determine the most common payment method used in each branch
SELECT Branch, payment_method AS Most_common_method
FROM (
    SELECT Branch, payment_method, COUNT(payment_method) AS method_count,
           RANK() OVER (PARTITION BY Branch ORDER BY COUNT(payment_method) DESC) AS rank2
    FROM walmart
    GROUP BY Branch, payment_method
) ranked_methods
WHERE rank2 = 1;

-- Q5: Calculate the total quantity of items sold for each category
SELECT category, SUM(Totals) AS Total_Sales
FROM walmart 
GROUP BY category;

-- Q6: Identify the peak hours (time intervals) for each branch in terms of transactions
SELECT Branch, Peak_time, Transactions
FROM (
    SELECT Branch, HOUR(STR_TO_DATE(time, '%H:%i:%s')) AS Peak_time, COUNT(*) AS Transactions,
           RANK() OVER (PARTITION BY Branch ORDER BY COUNT(*) DESC) AS rank2
    FROM walmart
    GROUP BY Branch, HOUR(STR_TO_DATE(time, '%H:%i:%s'))
) AS RankedData
WHERE rank2 = 1;

-- Q7: Calculate the average daily revenue for each branch
SELECT Branch, AVG(Daily_total) AS Avg_Daily_Revenue 
FROM (
    SELECT Branch, date, SUM(Totals) AS Daily_total 
    FROM walmart 
    GROUP BY Branch, date
) AS daily_totals 
GROUP BY Branch;

-- Q8: Determine which day of the week has the highest number of transactions
SELECT DAYNAME(date) AS DayOfTheWeek, COUNT(*) AS TransactionCount
FROM walmart
GROUP BY DAYNAME(date)
ORDER BY TransactionCount DESC
LIMIT 1;

-- Q9: Determine the most purchased category based on the number of units sold
SELECT category, SUM(quantity) AS Total_units 
FROM walmart 
GROUP BY category 
ORDER BY Total_units DESC 
LIMIT 3;

-- Q10: Determine the average unit price for items in each category
SELECT category, AVG(unit_price) AS Average_price 
FROM walmart 
GROUP BY category 
ORDER BY Average_price DESC 
LIMIT 10;

-- Q11: Find the most common payment method used for high-value transactions (e.g., total > $500)
SELECT payment_method, COUNT(*) AS transaction_count 
FROM walmart 
WHERE Totals > 500 
GROUP BY payment_method;

-- Q12: Calculate the total profit for each branch
SELECT Branch, SUM(profit_margin * quantity * unit_price) AS Total_profit 
FROM walmart 
GROUP BY Branch 
ORDER BY Total_profit DESC;

-- Q13: Determine the most profitable category for each city
SELECT City, category, SUM(profit_margin * quantity * unit_price) AS Total_profit 
FROM walmart 
GROUP BY City, category;

-- Q14: Identify the most common payment method for each branch
SELECT Branch, payment_method, Number_of_Transaction 
FROM (
    SELECT Branch, payment_method, COUNT(*) AS Number_of_Transaction, 
           RANK() OVER (PARTITION BY Branch ORDER BY COUNT(*) DESC) AS rank1 
    FROM walmart 
    GROUP BY Branch, payment_method
) ranked_payment 
WHERE rank1 = 1;

-- Q15: Categorize the sales into Morning, Afternoon, and Evening shifts
SELECT 
    CASE 
        WHEN HOUR(time) BETWEEN 6 AND 11 THEN 'Morning'
        WHEN HOUR(time) BETWEEN 12 AND 17 THEN 'Afternoon'
        ELSE 'Evening'
    END AS Shift, 
    COUNT(DISTINCT invoice_id) AS No_of_invoices
FROM walmart 
GROUP BY Shift 
ORDER BY No_of_invoices DESC;

-- Q16: Identify 5 branches with the highest decrease in profit in the second half of the year
WITH first_half_yr AS (
    SELECT Branch, MONTH(STR_TO_DATE(date, '%d/%m/%y')) AS Month, 
           SUM(unit_price * quantity * profit_margin) AS Profit 
    FROM walmart 
    WHERE MONTH(STR_TO_DATE(date, '%d/%m/%y')) <= 6 
    GROUP BY Branch, Month 
), second_half_yr AS (
    SELECT Branch, MONTH(STR_TO_DATE(date, '%d/%m/%y')) AS Month, 
           SUM(unit_price * quantity * profit_margin) AS Profit 
    FROM walmart 
    WHERE MONTH(STR_TO_DATE(date, '%d/%m/%y')) >= 6 
    GROUP BY Branch, Month 
)
SELECT fh.Branch, fh.Profit AS First_half_profit, sh.Profit AS Second_half_profit, 
       (fh.Profit - sh.Profit) AS Profit_Decrease
FROM first_half_yr AS fh
JOIN second_half_yr AS sh ON fh.Branch = sh.Branch
ORDER BY Profit_Decrease DESC  
LIMIT 5;
